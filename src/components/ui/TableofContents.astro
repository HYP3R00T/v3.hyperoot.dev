---
import type { HeadingHierarchy, HeadingProps } from "@/lib/types";
import { createHeadingHierarchy } from "@/lib/utils";

const { headings } = Astro.props as HeadingProps;
const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;
---

<div class="toc-container pr-2 overflow-x-hidden">
  {
    hasToC && (
      <div class="text-white py-4 hidden lg:flex flex-col gap-4">
        {toc.map((heading) => (
          <a href={`#${heading.slug}`} class="toc-item">
            <div class="toc-line w-5 bg-light" />
            <div class="toc-link text-light whitespace-nowrap ">
              {heading.text}
            </div>
          </a>
        ))}
      </div>
    )
  }
</div>

<style>
  .toc-item {
    @apply flex flex-row items-center gap-3;
  }
  :hover.toc-item .toc-line {
    @apply h-px w-10 bg-accent;
  }
  :hover.toc-item .toc-link {
    @apply text-accent;
  }
  .toc-item .toc-line {
    @apply h-px;
  }
  .toc-item .toc-link {
    @apply text-xs uppercase font-semibold tracking-wide;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const proseContainer = document.querySelector(".prose");
    if (!proseContainer) return;

    const sections = proseContainer.querySelectorAll("h2, h3");
    const tocLinks = document.querySelectorAll(".toc-link");
    const tocLines = document.querySelectorAll(".toc-line");
    const tocContainer = document.querySelector(
      ".toc-container",
    ) as HTMLElement | null;

    if (!tocContainer) return;

    document.addEventListener("scroll", () => {
      let index = sections.length;

      while (
        --index &&
        window.scrollY + 300 < (sections[index] as HTMLElement).offsetTop
      ) {}

      tocLinks.forEach((link) => {
        link.classList.remove("text-lightest");
        link.classList.add("text-light");
      });
      tocLinks[index].classList.add("text-lightest");
      tocLinks[index].classList.remove("text-light");

      tocLines.forEach((line) => {
        line.classList.remove("w-10", "bg-lightest");
        line.classList.add("w-5", "bg-light");
      });
      tocLines[index].classList.add("w-10", "bg-lightest");
      tocLines[index].classList.remove("w-5", "bg-light");

      const activeTocLink = tocLinks[index] as HTMLElement;
      const tocContainerHeight = tocContainer.offsetHeight;
      const linkTopPosition = activeTocLink.offsetTop;

      if (
        linkTopPosition + activeTocLink.offsetHeight + 100 >
        tocContainerHeight + tocContainer.scrollTop
      ) {
        activeTocLink.scrollIntoView({ behavior: "smooth", block: "nearest" });
      } else if (linkTopPosition < tocContainer.scrollTop) {
        activeTocLink.scrollIntoView({ behavior: "smooth", block: "nearest" });
      }
    });
  });
</script>
